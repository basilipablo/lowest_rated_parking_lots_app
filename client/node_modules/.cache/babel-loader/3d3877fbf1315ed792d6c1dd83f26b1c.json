{"ast":null,"code":"import axios from 'axios';\nexport function getParkings(location) {\n  const config = {\n    Authorization: \"Bearer \" + process.env.REACT_APP_YELP_API_KEY,\n    crossdomain: true,\n    params: {\n      limit: 6,\n      term: 'parking',\n      location: location,\n      offset: 0\n    }\n  };\n  return dispatch => {\n    return axios.get(\"https://api.yelp.com/v3/businesses/search\", config).then(res => JSON.parse(res)).then(res => console.log(res)).then(res => {\n      dispatch({\n        type: 'GET_BUSINESS',\n        payload: res.data\n      });\n    }).catch(e => console.error(e));\n  };\n}","map":{"version":3,"sources":["/home/toshiba/Escritorio/Pablo/lowest_rated_parking_lots_app/src/app/actions.js"],"names":["axios","getParkings","location","config","Authorization","process","env","REACT_APP_YELP_API_KEY","crossdomain","params","limit","term","offset","dispatch","get","then","res","JSON","parse","console","log","type","payload","data","catch","e","error"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,OAAO,SAASC,WAAT,CAAqBC,QAArB,EAA+B;AAClC,QAAMC,MAAM,GAAG;AACXC,IAAAA,aAAa,EAAE,YAAYC,OAAO,CAACC,GAAR,CAAYC,sBAD5B;AAEXC,IAAAA,WAAW,EAAE,IAFF;AAGXC,IAAAA,MAAM,EAAE;AACJC,MAAAA,KAAK,EAAE,CADH;AAEJC,MAAAA,IAAI,EAAE,SAFF;AAGJT,MAAAA,QAAQ,EAAEA,QAHN;AAIJU,MAAAA,MAAM,EAAE;AAJJ;AAHG,GAAf;AAUA,SAAQC,QAAD,IAAc;AACjB,WAAOb,KAAK,CAACc,GAAN,CAAU,2CAAV,EAAuDX,MAAvD,EACFY,IADE,CACGC,GAAG,IAAIC,IAAI,CAACC,KAAL,CAAWF,GAAX,CADV,EAEFD,IAFE,CAEGC,GAAG,IAAIG,OAAO,CAACC,GAAR,CAAYJ,GAAZ,CAFV,EAGFD,IAHE,CAGGC,GAAG,IAAI;AACTH,MAAAA,QAAQ,CAAC;AACLQ,QAAAA,IAAI,EAAE,cADD;AAELC,QAAAA,OAAO,EAAEN,GAAG,CAACO;AAFR,OAAD,CAAR;AAIH,KARE,EASFC,KATE,CASIC,CAAC,IAAIN,OAAO,CAACO,KAAR,CAAcD,CAAd,CATT,CAAP;AAUH,GAXD;AAYH","sourcesContent":["import axios from 'axios';\n\nexport function getParkings(location) {\n    const config = {\n        Authorization: \"Bearer \" + process.env.REACT_APP_YELP_API_KEY,\n        crossdomain: true,\n        params: {\n            limit: 6,\n            term: 'parking',\n            location: location,\n            offset: 0,\n        }\n    }\n    return (dispatch) => {\n        return axios.get(\"https://api.yelp.com/v3/businesses/search\", config)\n            .then(res => JSON.parse(res))\n            .then(res => console.log(res))\n            .then(res => {\n                dispatch({\n                    type: 'GET_BUSINESS',\n                    payload: res.data\n                })\n            })\n            .catch(e => console.error(e))\n    }\n}\n"]},"metadata":{},"sourceType":"module"}